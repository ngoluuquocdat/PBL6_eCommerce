// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eComSolution.Data.EF;

namespace eComSolution.Data.Migrations
{
    [DbContext(typeof(EComDbContext))]
    [Migration("20211013022604_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eComSolution.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetail_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetail_Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 150000,
                            ProductDetail_Id = 8,
                            Quantity = 10,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Áo Thun",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Áo Sơ mi",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Áo Hoodie",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Quần Jean",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Đồ lót",
                            SortOrder = 5
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Register"
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Login"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mod"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.GroupUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 1,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 1,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 3,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 3,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 4,
                            GroupId = 3
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Histories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1,
                            Date = new DateTime(2021, 10, 13, 9, 26, 3, 946, DateTimeKind.Local).AddTicks(6568),
                            ProductId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Count = 1,
                            Date = new DateTime(2021, 10, 13, 9, 26, 3, 946, DateTimeKind.Local).AddTicks(7155),
                            ProductId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Count = 1,
                            Date = new DateTime(2021, 10, 13, 9, 26, 3, 946, DateTimeKind.Local).AddTicks(7161),
                            ProductId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDate = new DateTime(2021, 10, 13, 9, 26, 3, 946, DateTimeKind.Local).AddTicks(9960),
                            ShipAddress = "123 Lê Duẩn, Thanh Khê, Đà Nẵng",
                            ShipName = "Đinh Công Tài",
                            ShipPhone = "09053438847",
                            ShopId = 2,
                            State = "Đang xử lý",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetail_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetail_Id");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Price = 250000,
                            ProductDetail_Id = 11,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            Price = 250000,
                            ProductDetail_Id = 13,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Permission", b =>
                {
                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("FunctionId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            FunctionId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 1
                        },
                        new
                        {
                            FunctionId = 1,
                            GroupId = 2
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 2
                        },
                        new
                        {
                            FunctionId = 1,
                            GroupId = 3
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 3
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2021, 10, 13, 9, 26, 3, 945, DateTimeKind.Local).AddTicks(1465),
                            Description = "Mô tả sản phẩm:\n Chất liệu: 100% cotton\n Màu sắc : trắng & đen",
                            IsDeleted = false,
                            Name = "Áo thun SadBoiz",
                            OriginalPrice = 100000,
                            Price = 200000,
                            ShopId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            DateCreated = new DateTime(2021, 10, 13, 9, 26, 3, 946, DateTimeKind.Local).AddTicks(3022),
                            Description = "Mô tả sản phẩm:\n Chất liệu: 100% cotton\n Màu sắc : đỏ & đen",
                            IsDeleted = false,
                            Name = "Quần lót Calvin Klein",
                            OriginalPrice = 100000,
                            Price = 150000,
                            ShopId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            DateCreated = new DateTime(2021, 10, 13, 9, 26, 3, 946, DateTimeKind.Local).AddTicks(3045),
                            Description = "Mô tả sản phẩm:\n Brand: XFire\n Chất liệu : cotton co dãn",
                            IsDeleted = false,
                            Name = "Áo thun trơn XFire",
                            OriginalPrice = 150000,
                            Price = 250000,
                            ShopId = 2,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            DateCreated = new DateTime(2021, 10, 13, 9, 26, 3, 946, DateTimeKind.Local).AddTicks(3048),
                            Description = "Mô tả sản phẩm:\n Form: Fit\n Chất liệu : jean",
                            IsDeleted = false,
                            Name = "Quần Jean ôm nam",
                            OriginalPrice = 150000,
                            Price = 250000,
                            ShopId = 2,
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 3,
                            Color = "Trắng",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 4,
                            Color = "Trắng",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 5,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 6,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "M",
                            Stock = 10
                        },
                        new
                        {
                            Id = 7,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 8,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "M",
                            Stock = 10
                        },
                        new
                        {
                            Id = 9,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 10,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 11,
                            Color = "Xám",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 12,
                            Color = "Xám",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 13,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 4,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 14,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 4,
                            Size = "L",
                            Stock = 10
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSizeDetail")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 DT605, Hòa Tiến, Hòa Vang, Đà Nẵng",
                            Avatar = "",
                            Description = "Cửa hàng áo quần chất lượng cao, giá cả phải chăng",
                            Disable = false,
                            Name = "Tuấn's Fashion",
                            PhoneNumber = "0921231220"
                        },
                        new
                        {
                            Id = 2,
                            Address = "160 Trần Nhật Duật, Cẩm Châu, Hội An, Quảng Nam",
                            Avatar = "",
                            Description = "Cửa hàng áo quần nam",
                            Disable = false,
                            Name = "Đạt's Clothes",
                            PhoneNumber = "0905553859"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(62)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId")
                        .IsUnique()
                        .HasFilter("[ShopId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Disable = false,
                            Email = "tuandang29042000@gmail.com",
                            Fullname = "admin",
                            PasswordHash = new byte[] { 229, 210, 0, 238, 153, 149, 95, 2, 34, 63, 5, 157, 132, 221, 245, 194, 171, 87, 59, 175, 96, 9, 3, 197, 50, 137, 196, 86, 136, 221, 135, 203, 80, 237, 198, 32, 59, 109, 94, 70, 218, 27, 89, 71, 163, 182, 5, 135, 227, 77, 5, 188, 11, 77, 86, 235, 246, 198, 19, 39, 142, 81, 63, 98 },
                            PasswordSalt = new byte[] { 27, 6, 185, 68, 206, 41, 252, 220, 96, 129, 168, 245, 69, 11, 214, 191, 199, 82, 204, 89, 198, 119, 138, 248, 201, 59, 112, 71, 243, 116, 116, 15, 80, 190, 79, 90, 16, 217, 210, 115, 197, 72, 33, 53, 37, 7, 211, 172, 119, 161, 124, 99, 236, 210, 201, 191, 114, 20, 30, 82, 147, 141, 235, 202, 42, 15, 126, 17, 86, 151, 63, 187, 220, 36, 119, 132, 75, 115, 181, 190, 91, 18, 114, 197, 253, 212, 59, 166, 220, 230, 153, 231, 253, 234, 124, 80, 22, 184, 54, 95, 190, 255, 46, 102, 21, 231, 152, 61, 6, 134, 109, 29, 5, 121, 220, 252, 29, 1, 242, 115, 76, 173, 172, 190, 87, 134, 136, 148 },
                            PhoneNumber = "0921231220",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Disable = false,
                            Email = "tuandang29042000@gmail.com",
                            Fullname = "Đặng Quốc Tuấn",
                            PasswordHash = new byte[] { 232, 156, 61, 211, 31, 150, 43, 143, 179, 246, 163, 23, 251, 171, 12, 140, 44, 56, 102, 100, 103, 35, 35, 250, 101, 28, 23, 95, 193, 0, 2, 162, 44, 116, 44, 115, 72, 229, 4, 180, 67, 46, 138, 102, 12, 93, 56, 74, 138, 36, 235, 151, 2, 46, 226, 35, 39, 167, 210, 136, 37, 151, 80, 104 },
                            PasswordSalt = new byte[] { 27, 6, 185, 68, 206, 41, 252, 220, 96, 129, 168, 245, 69, 11, 214, 191, 199, 82, 204, 89, 198, 119, 138, 248, 201, 59, 112, 71, 243, 116, 116, 15, 80, 190, 79, 90, 16, 217, 210, 115, 197, 72, 33, 53, 37, 7, 211, 172, 119, 161, 124, 99, 236, 210, 201, 191, 114, 20, 30, 82, 147, 141, 235, 202, 42, 15, 126, 17, 86, 151, 63, 187, 220, 36, 119, 132, 75, 115, 181, 190, 91, 18, 114, 197, 253, 212, 59, 166, 220, 230, 153, 231, 253, 234, 124, 80, 22, 184, 54, 95, 190, 255, 46, 102, 21, 231, 152, 61, 6, 134, 109, 29, 5, 121, 220, 252, 29, 1, 242, 115, 76, 173, 172, 190, 87, 134, 136, 148 },
                            PhoneNumber = "0921231220",
                            ShopId = 1,
                            Username = "quoctuan"
                        },
                        new
                        {
                            Id = 3,
                            Disable = false,
                            Email = "ngoluuquocdat@gmail.com",
                            Fullname = "Ngô Lưu Quốc Đạt",
                            PasswordHash = new byte[] { 113, 161, 34, 206, 30, 200, 99, 114, 167, 53, 10, 133, 139, 82, 160, 73, 162, 82, 44, 131, 52, 182, 7, 91, 84, 141, 92, 238, 75, 20, 125, 124, 83, 216, 183, 65, 89, 165, 73, 222, 227, 231, 136, 22, 192, 170, 52, 234, 154, 252, 119, 30, 232, 166, 196, 177, 228, 227, 74, 237, 230, 69, 237, 176 },
                            PasswordSalt = new byte[] { 27, 6, 185, 68, 206, 41, 252, 220, 96, 129, 168, 245, 69, 11, 214, 191, 199, 82, 204, 89, 198, 119, 138, 248, 201, 59, 112, 71, 243, 116, 116, 15, 80, 190, 79, 90, 16, 217, 210, 115, 197, 72, 33, 53, 37, 7, 211, 172, 119, 161, 124, 99, 236, 210, 201, 191, 114, 20, 30, 82, 147, 141, 235, 202, 42, 15, 126, 17, 86, 151, 63, 187, 220, 36, 119, 132, 75, 115, 181, 190, 91, 18, 114, 197, 253, 212, 59, 166, 220, 230, 153, 231, 253, 234, 124, 80, 22, 184, 54, 95, 190, 255, 46, 102, 21, 231, 152, 61, 6, 134, 109, 29, 5, 121, 220, 252, 29, 1, 242, 115, 76, 173, 172, 190, 87, 134, 136, 148 },
                            PhoneNumber = "090553859",
                            ShopId = 2,
                            Username = "quocdat"
                        },
                        new
                        {
                            Id = 4,
                            Disable = false,
                            Email = "badding@gmail.com",
                            Fullname = "Đinh Công Tài",
                            PasswordHash = new byte[] { 121, 120, 15, 223, 181, 101, 2, 237, 178, 43, 183, 231, 236, 18, 23, 22, 243, 109, 77, 59, 211, 10, 221, 169, 76, 5, 65, 143, 229, 124, 110, 189, 71, 232, 136, 75, 80, 51, 109, 150, 192, 135, 60, 91, 99, 133, 123, 34, 166, 121, 70, 212, 177, 135, 78, 3, 89, 106, 33, 76, 14, 255, 95, 250 },
                            PasswordSalt = new byte[] { 27, 6, 185, 68, 206, 41, 252, 220, 96, 129, 168, 245, 69, 11, 214, 191, 199, 82, 204, 89, 198, 119, 138, 248, 201, 59, 112, 71, 243, 116, 116, 15, 80, 190, 79, 90, 16, 217, 210, 115, 197, 72, 33, 53, 37, 7, 211, 172, 119, 161, 124, 99, 236, 210, 201, 191, 114, 20, 30, 82, 147, 141, 235, 202, 42, 15, 126, 17, 86, 151, 63, 187, 220, 36, 119, 132, 75, 115, 181, 190, 91, 18, 114, 197, 253, 212, 59, 166, 220, 230, 153, 231, 253, 234, 124, 80, 22, 184, 54, 95, 190, 255, 46, 102, 21, 231, 152, 61, 6, 134, 109, 29, 5, 121, 220, 252, 29, 1, 242, 115, 76, 173, 172, 190, 87, 134, 136, 148 },
                            PhoneNumber = "090553859",
                            Username = "congtai"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Cart", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("Carts")
                        .HasForeignKey("ProductDetail_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.GroupUser", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.History", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("Histories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductDetail_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Permission", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Function", "Function")
                        .WithMany("Permissions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithOne("User")
                        .HasForeignKey("eComSolution.Data.Entities.User", "ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Function", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Group", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Shop", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("GroupUsers");

                    b.Navigation("Histories");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
