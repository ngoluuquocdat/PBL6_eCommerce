// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eComSolution.Data.EF;

namespace eComSolution.Data.Migrations
{
    [DbContext(typeof(EComDbContext))]
    [Migration("20211104013739_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eComSolution.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetail_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetail_Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 150000,
                            ProductDetail_Id = 8,
                            Quantity = 10,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Áo Thun",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Áo Sơ mi",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Áo Hoodie",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Quần Jean",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Đồ lót",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Váy",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Đầm",
                            SortOrder = 7
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Accounts.Register"
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Accounts.Login"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mod"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.GroupUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 1,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 1,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 3,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 3,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 4,
                            GroupId = 3
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Histories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1,
                            Date = new DateTime(2021, 11, 4, 8, 37, 39, 56, DateTimeKind.Local).AddTicks(8639),
                            ProductId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Count = 1,
                            Date = new DateTime(2021, 11, 4, 8, 37, 39, 56, DateTimeKind.Local).AddTicks(9222),
                            ProductId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Count = 1,
                            Date = new DateTime(2021, 11, 4, 8, 37, 39, 56, DateTimeKind.Local).AddTicks(9227),
                            ProductId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDate = new DateTime(2021, 11, 4, 8, 37, 39, 57, DateTimeKind.Local).AddTicks(2316),
                            ShipAddress = "123 Lê Duẩn, Thanh Khê, Đà Nẵng",
                            ShipName = "Đinh Công Tài",
                            ShipPhone = "09053438847",
                            ShopId = 2,
                            State = "Chờ xử lý",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetail_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetail_Id");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Price = 250000,
                            ProductDetail_Id = 11,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            Price = 250000,
                            ProductDetail_Id = 13,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Permission", b =>
                {
                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("FunctionId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            FunctionId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 1
                        },
                        new
                        {
                            FunctionId = 1,
                            GroupId = 2
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 2
                        },
                        new
                        {
                            FunctionId = 1,
                            GroupId = 3
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 3
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2021, 11, 4, 8, 37, 39, 56, DateTimeKind.Local).AddTicks(3276),
                            Description = "Mô tả sản phẩm:\n Chất liệu: 100% cotton\n Màu sắc : trắng & đen",
                            Gender = 1,
                            IsDeleted = false,
                            Name = "Áo thun SadBoiz",
                            OriginalPrice = 100000,
                            Price = 200000,
                            ShopId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            DateCreated = new DateTime(2021, 11, 4, 8, 37, 39, 56, DateTimeKind.Local).AddTicks(5227),
                            Description = "Mô tả sản phẩm:\n Chất liệu: 100% cotton\n Màu sắc : đỏ & đen",
                            Gender = 1,
                            IsDeleted = false,
                            Name = "Quần lót Calvin Klein",
                            OriginalPrice = 100000,
                            Price = 150000,
                            ShopId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            DateCreated = new DateTime(2021, 11, 4, 8, 37, 39, 56, DateTimeKind.Local).AddTicks(5234),
                            Description = "Mô tả sản phẩm:\n Brand: XFire\n Chất liệu : cotton co dãn",
                            Gender = 3,
                            IsDeleted = false,
                            Name = "Áo thun trơn XFire",
                            OriginalPrice = 150000,
                            Price = 250000,
                            ShopId = 2,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            DateCreated = new DateTime(2021, 11, 4, 8, 37, 39, 56, DateTimeKind.Local).AddTicks(5237),
                            Description = "Mô tả sản phẩm:\n Form: Fit\n Chất liệu : jean",
                            Gender = 1,
                            IsDeleted = false,
                            Name = "Quần Jean ôm nam",
                            OriginalPrice = 150000,
                            Price = 250000,
                            ShopId = 2,
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 3,
                            Color = "Trắng",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 4,
                            Color = "Trắng",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 5,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 6,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "M",
                            Stock = 10
                        },
                        new
                        {
                            Id = 7,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 8,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "M",
                            Stock = 10
                        },
                        new
                        {
                            Id = 9,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 10,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 11,
                            Color = "Xám",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 12,
                            Color = "Xám",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 13,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 4,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 14,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 4,
                            Size = "L",
                            Stock = 10
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSizeDetail")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ResetPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numcheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResetPasses");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 DT605, Hòa Tiến, Hòa Vang, Đà Nẵng",
                            Avatar = "",
                            DateCreated = new DateTime(2021, 11, 4, 8, 37, 39, 49, DateTimeKind.Local).AddTicks(620),
                            DateModified = new DateTime(2021, 11, 4, 8, 37, 39, 50, DateTimeKind.Local).AddTicks(2113),
                            Description = "Cửa hàng áo quần chất lượng cao, giá cả phải chăng",
                            Disable = false,
                            Name = "Tuấn's Fashion",
                            PhoneNumber = "0921231220"
                        },
                        new
                        {
                            Id = 2,
                            Address = "160 Trần Nhật Duật, Cẩm Châu, Hội An, Quảng Nam",
                            Avatar = "",
                            DateCreated = new DateTime(2021, 11, 4, 8, 37, 39, 50, DateTimeKind.Local).AddTicks(3213),
                            DateModified = new DateTime(2021, 11, 4, 8, 37, 39, 50, DateTimeKind.Local).AddTicks(3220),
                            Description = "Cửa hàng áo quần nam",
                            Disable = false,
                            Name = "Đạt's Clothes",
                            PhoneNumber = "0905553859"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(62)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId")
                        .IsUnique()
                        .HasFilter("[ShopId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Disable = false,
                            Email = "tuandang29042000@gmail.com",
                            Fullname = "admin",
                            PasswordHash = new byte[] { 22, 168, 128, 70, 137, 56, 251, 54, 75, 237, 251, 152, 193, 30, 14, 23, 96, 238, 63, 141, 103, 146, 171, 87, 5, 27, 250, 49, 164, 61, 63, 137, 42, 43, 86, 230, 116, 40, 50, 110, 222, 24, 156, 227, 94, 124, 169, 143, 31, 206, 247, 211, 226, 18, 208, 31, 249, 107, 196, 110, 178, 157, 204, 200 },
                            PasswordSalt = new byte[] { 217, 99, 111, 254, 97, 160, 15, 152, 104, 227, 62, 226, 191, 250, 205, 210, 118, 8, 139, 134, 75, 71, 140, 23, 195, 107, 8, 11, 159, 187, 13, 80, 74, 80, 102, 249, 186, 15, 241, 21, 155, 65, 134, 212, 250, 97, 161, 149, 52, 125, 153, 245, 116, 87, 182, 150, 82, 86, 101, 135, 158, 7, 68, 159, 39, 49, 240, 202, 181, 228, 71, 121, 63, 16, 246, 84, 75, 132, 249, 0, 174, 246, 199, 238, 89, 50, 173, 103, 213, 72, 31, 177, 199, 255, 248, 41, 172, 222, 62, 83, 231, 125, 198, 64, 137, 26, 66, 233, 193, 61, 14, 180, 163, 233, 62, 177, 170, 210, 119, 189, 238, 196, 214, 201, 126, 221, 85, 81 },
                            PhoneNumber = "0921231220",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "123 DT605, Hòa Tiến, Hòa Vang, Đà Nẵng",
                            Disable = false,
                            Email = "tuandang29042000@gmail.com",
                            Fullname = "Đặng Quốc Tuấn",
                            PasswordHash = new byte[] { 39, 18, 226, 144, 140, 16, 198, 248, 189, 10, 100, 28, 208, 227, 89, 87, 134, 155, 127, 3, 34, 15, 145, 199, 53, 171, 123, 155, 154, 49, 26, 46, 148, 57, 182, 32, 21, 74, 117, 253, 213, 236, 145, 62, 137, 179, 169, 129, 240, 208, 35, 52, 105, 215, 47, 114, 193, 106, 170, 32, 43, 119, 129, 179 },
                            PasswordSalt = new byte[] { 217, 99, 111, 254, 97, 160, 15, 152, 104, 227, 62, 226, 191, 250, 205, 210, 118, 8, 139, 134, 75, 71, 140, 23, 195, 107, 8, 11, 159, 187, 13, 80, 74, 80, 102, 249, 186, 15, 241, 21, 155, 65, 134, 212, 250, 97, 161, 149, 52, 125, 153, 245, 116, 87, 182, 150, 82, 86, 101, 135, 158, 7, 68, 159, 39, 49, 240, 202, 181, 228, 71, 121, 63, 16, 246, 84, 75, 132, 249, 0, 174, 246, 199, 238, 89, 50, 173, 103, 213, 72, 31, 177, 199, 255, 248, 41, 172, 222, 62, 83, 231, 125, 198, 64, 137, 26, 66, 233, 193, 61, 14, 180, 163, 233, 62, 177, 170, 210, 119, 189, 238, 196, 214, 201, 126, 221, 85, 81 },
                            PhoneNumber = "0921231220",
                            ShopId = 1,
                            Username = "quoctuan"
                        },
                        new
                        {
                            Id = 3,
                            Address = "160 Trần Nhật Duật, Hội An, Quảng Nam",
                            Disable = false,
                            Email = "ngoluuquocdat@gmail.com",
                            Fullname = "Ngô Lưu Quốc Đạt",
                            PasswordHash = new byte[] { 192, 28, 123, 191, 88, 105, 139, 30, 168, 18, 244, 218, 123, 74, 98, 54, 195, 192, 22, 121, 28, 55, 195, 35, 167, 214, 98, 35, 216, 208, 101, 196, 159, 188, 224, 177, 235, 43, 118, 140, 166, 64, 181, 211, 240, 111, 141, 215, 222, 46, 240, 187, 184, 194, 21, 88, 21, 177, 159, 217, 43, 28, 182, 91 },
                            PasswordSalt = new byte[] { 217, 99, 111, 254, 97, 160, 15, 152, 104, 227, 62, 226, 191, 250, 205, 210, 118, 8, 139, 134, 75, 71, 140, 23, 195, 107, 8, 11, 159, 187, 13, 80, 74, 80, 102, 249, 186, 15, 241, 21, 155, 65, 134, 212, 250, 97, 161, 149, 52, 125, 153, 245, 116, 87, 182, 150, 82, 86, 101, 135, 158, 7, 68, 159, 39, 49, 240, 202, 181, 228, 71, 121, 63, 16, 246, 84, 75, 132, 249, 0, 174, 246, 199, 238, 89, 50, 173, 103, 213, 72, 31, 177, 199, 255, 248, 41, 172, 222, 62, 83, 231, 125, 198, 64, 137, 26, 66, 233, 193, 61, 14, 180, 163, 233, 62, 177, 170, 210, 119, 189, 238, 196, 214, 201, 126, 221, 85, 81 },
                            PhoneNumber = "090553859",
                            ShopId = 2,
                            Username = "quocdat"
                        },
                        new
                        {
                            Id = 4,
                            Address = "123 Lê Duẩn, Thanh Khê, Đà Nẵng",
                            Disable = false,
                            Email = "badding@gmail.com",
                            Fullname = "Đinh Công Tài",
                            PasswordHash = new byte[] { 30, 145, 14, 49, 35, 217, 55, 99, 231, 242, 85, 110, 134, 6, 250, 68, 225, 15, 30, 251, 176, 235, 55, 171, 30, 5, 180, 57, 69, 255, 52, 168, 110, 198, 14, 252, 137, 52, 130, 74, 107, 27, 149, 51, 126, 89, 240, 189, 68, 251, 55, 102, 179, 161, 148, 97, 183, 57, 141, 209, 45, 170, 160, 46 },
                            PasswordSalt = new byte[] { 217, 99, 111, 254, 97, 160, 15, 152, 104, 227, 62, 226, 191, 250, 205, 210, 118, 8, 139, 134, 75, 71, 140, 23, 195, 107, 8, 11, 159, 187, 13, 80, 74, 80, 102, 249, 186, 15, 241, 21, 155, 65, 134, 212, 250, 97, 161, 149, 52, 125, 153, 245, 116, 87, 182, 150, 82, 86, 101, 135, 158, 7, 68, 159, 39, 49, 240, 202, 181, 228, 71, 121, 63, 16, 246, 84, 75, 132, 249, 0, 174, 246, 199, 238, 89, 50, 173, 103, 213, 72, 31, 177, 199, 255, 248, 41, 172, 222, 62, 83, 231, 125, 198, 64, 137, 26, 66, 233, 193, 61, 14, 180, 163, 233, 62, 177, 170, 210, 119, 189, 238, 196, 214, 201, 126, 221, 85, 81 },
                            PhoneNumber = "090553859",
                            Username = "congtai"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Cart", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("Carts")
                        .HasForeignKey("ProductDetail_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.GroupUser", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.History", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("Histories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductDetail_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Permission", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Function", "Function")
                        .WithMany("Permissions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithOne("User")
                        .HasForeignKey("eComSolution.Data.Entities.User", "ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Function", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Group", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Shop", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("GroupUsers");

                    b.Navigation("Histories");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
