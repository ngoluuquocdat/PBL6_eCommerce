// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eComSolution.Data.EF;

namespace eComSolution.Data.Migrations
{
    [DbContext(typeof(EComDbContext))]
    [Migration("20211022105254_UpdateShop_Tb")]
    partial class UpdateShop_Tb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eComSolution.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetail_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetail_Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 150000,
                            ProductDetail_Id = 8,
                            Quantity = 10,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Áo Thun",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Áo Sơ mi",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Áo Hoodie",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Quần Jean",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Đồ lót",
                            SortOrder = 5
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Register"
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Login"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mod"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.GroupUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 1,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 1,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 3,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 3,
                            GroupId = 3
                        },
                        new
                        {
                            UserId = 4,
                            GroupId = 3
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Histories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1,
                            Date = new DateTime(2021, 10, 22, 17, 52, 54, 169, DateTimeKind.Local).AddTicks(3801),
                            ProductId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Count = 1,
                            Date = new DateTime(2021, 10, 22, 17, 52, 54, 169, DateTimeKind.Local).AddTicks(4288),
                            ProductId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Count = 1,
                            Date = new DateTime(2021, 10, 22, 17, 52, 54, 169, DateTimeKind.Local).AddTicks(4292),
                            ProductId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDate = new DateTime(2021, 10, 22, 17, 52, 54, 169, DateTimeKind.Local).AddTicks(6225),
                            ShipAddress = "123 Lê Duẩn, Thanh Khê, Đà Nẵng",
                            ShipName = "Đinh Công Tài",
                            ShipPhone = "09053438847",
                            ShopId = 2,
                            State = "Chờ xử lý",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductDetail_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetail_Id");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Price = 250000,
                            ProductDetail_Id = 11,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            Price = 250000,
                            ProductDetail_Id = 13,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Permission", b =>
                {
                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("FunctionId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            FunctionId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 1
                        },
                        new
                        {
                            FunctionId = 1,
                            GroupId = 2
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 2
                        },
                        new
                        {
                            FunctionId = 1,
                            GroupId = 3
                        },
                        new
                        {
                            FunctionId = 2,
                            GroupId = 3
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DateCreated = new DateTime(2021, 10, 22, 17, 52, 54, 167, DateTimeKind.Local).AddTicks(8769),
                            Description = "Mô tả sản phẩm:\n Chất liệu: 100% cotton\n Màu sắc : trắng & đen",
                            IsDeleted = false,
                            Name = "Áo thun SadBoiz",
                            OriginalPrice = 100000,
                            Price = 200000,
                            ShopId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            DateCreated = new DateTime(2021, 10, 22, 17, 52, 54, 169, DateTimeKind.Local).AddTicks(538),
                            Description = "Mô tả sản phẩm:\n Chất liệu: 100% cotton\n Màu sắc : đỏ & đen",
                            IsDeleted = false,
                            Name = "Quần lót Calvin Klein",
                            OriginalPrice = 100000,
                            Price = 150000,
                            ShopId = 1,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            DateCreated = new DateTime(2021, 10, 22, 17, 52, 54, 169, DateTimeKind.Local).AddTicks(569),
                            Description = "Mô tả sản phẩm:\n Brand: XFire\n Chất liệu : cotton co dãn",
                            IsDeleted = false,
                            Name = "Áo thun trơn XFire",
                            OriginalPrice = 150000,
                            Price = 250000,
                            ShopId = 2,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            DateCreated = new DateTime(2021, 10, 22, 17, 52, 54, 169, DateTimeKind.Local).AddTicks(571),
                            Description = "Mô tả sản phẩm:\n Form: Fit\n Chất liệu : jean",
                            IsDeleted = false,
                            Name = "Quần Jean ôm nam",
                            OriginalPrice = 150000,
                            Price = 250000,
                            ShopId = 2,
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 3,
                            Color = "Trắng",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 4,
                            Color = "Trắng",
                            IsDeleted = false,
                            ProductId = 1,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 5,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 6,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "M",
                            Stock = 10
                        },
                        new
                        {
                            Id = 7,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 8,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 2,
                            Size = "M",
                            Stock = 10
                        },
                        new
                        {
                            Id = 9,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 10,
                            Color = "Đỏ",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 11,
                            Color = "Xám",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 12,
                            Color = "Xám",
                            IsDeleted = false,
                            ProductId = 3,
                            Size = "L",
                            Stock = 10
                        },
                        new
                        {
                            Id = 13,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 4,
                            Size = "XL",
                            Stock = 10
                        },
                        new
                        {
                            Id = 14,
                            Color = "Đen",
                            IsDeleted = false,
                            ProductId = 4,
                            Size = "L",
                            Stock = 10
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSizeDetail")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ResetPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numcheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResetPasses");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 DT605, Hòa Tiến, Hòa Vang, Đà Nẵng",
                            Avatar = "",
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cửa hàng áo quần chất lượng cao, giá cả phải chăng",
                            Disable = false,
                            Name = "Tuấn's Fashion",
                            PhoneNumber = "0921231220"
                        },
                        new
                        {
                            Id = 2,
                            Address = "160 Trần Nhật Duật, Cẩm Châu, Hội An, Quảng Nam",
                            Avatar = "",
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cửa hàng áo quần nam",
                            Disable = false,
                            Name = "Đạt's Clothes",
                            PhoneNumber = "0905553859"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(62)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId")
                        .IsUnique()
                        .HasFilter("[ShopId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Disable = false,
                            Email = "tuandang29042000@gmail.com",
                            Fullname = "admin",
                            PasswordHash = new byte[] { 81, 248, 223, 7, 66, 155, 73, 65, 244, 193, 137, 142, 121, 34, 52, 21, 191, 73, 31, 206, 76, 21, 177, 220, 217, 116, 192, 151, 51, 203, 249, 23, 1, 33, 24, 134, 42, 196, 90, 240, 185, 118, 104, 169, 134, 242, 73, 218, 254, 255, 138, 17, 177, 197, 170, 4, 241, 186, 120, 143, 57, 236, 72, 118 },
                            PasswordSalt = new byte[] { 145, 134, 143, 179, 85, 185, 211, 228, 60, 253, 233, 59, 248, 202, 177, 212, 255, 98, 155, 1, 16, 219, 151, 211, 231, 187, 250, 105, 144, 48, 20, 64, 124, 122, 13, 141, 236, 152, 146, 95, 134, 173, 41, 250, 244, 232, 29, 1, 117, 168, 35, 3, 2, 63, 91, 151, 199, 83, 248, 145, 25, 114, 209, 71, 146, 182, 5, 103, 227, 0, 70, 248, 29, 249, 183, 215, 158, 102, 153, 101, 35, 11, 144, 86, 54, 170, 226, 181, 69, 204, 118, 192, 236, 82, 229, 45, 102, 204, 203, 144, 164, 113, 3, 43, 47, 225, 41, 126, 191, 169, 137, 196, 232, 78, 103, 182, 131, 78, 44, 91, 132, 26, 87, 135, 26, 134, 44, 220 },
                            PhoneNumber = "0921231220",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Disable = false,
                            Email = "tuandang29042000@gmail.com",
                            Fullname = "Đặng Quốc Tuấn",
                            PasswordHash = new byte[] { 24, 243, 49, 91, 174, 130, 237, 99, 60, 166, 28, 182, 23, 112, 41, 216, 123, 117, 31, 108, 191, 210, 41, 54, 160, 159, 230, 185, 64, 146, 80, 178, 72, 24, 36, 188, 206, 55, 128, 232, 93, 209, 25, 1, 236, 255, 186, 232, 48, 9, 188, 137, 237, 90, 73, 107, 151, 58, 15, 156, 242, 113, 121, 241 },
                            PasswordSalt = new byte[] { 145, 134, 143, 179, 85, 185, 211, 228, 60, 253, 233, 59, 248, 202, 177, 212, 255, 98, 155, 1, 16, 219, 151, 211, 231, 187, 250, 105, 144, 48, 20, 64, 124, 122, 13, 141, 236, 152, 146, 95, 134, 173, 41, 250, 244, 232, 29, 1, 117, 168, 35, 3, 2, 63, 91, 151, 199, 83, 248, 145, 25, 114, 209, 71, 146, 182, 5, 103, 227, 0, 70, 248, 29, 249, 183, 215, 158, 102, 153, 101, 35, 11, 144, 86, 54, 170, 226, 181, 69, 204, 118, 192, 236, 82, 229, 45, 102, 204, 203, 144, 164, 113, 3, 43, 47, 225, 41, 126, 191, 169, 137, 196, 232, 78, 103, 182, 131, 78, 44, 91, 132, 26, 87, 135, 26, 134, 44, 220 },
                            PhoneNumber = "0921231220",
                            ShopId = 1,
                            Username = "quoctuan"
                        },
                        new
                        {
                            Id = 3,
                            Disable = false,
                            Email = "ngoluuquocdat@gmail.com",
                            Fullname = "Ngô Lưu Quốc Đạt",
                            PasswordHash = new byte[] { 136, 217, 3, 94, 53, 185, 187, 178, 3, 253, 166, 22, 28, 132, 244, 238, 77, 1, 73, 110, 241, 68, 10, 150, 70, 88, 124, 19, 148, 35, 11, 135, 201, 215, 21, 29, 237, 125, 222, 141, 87, 79, 143, 189, 226, 122, 139, 181, 36, 122, 0, 137, 65, 238, 246, 87, 30, 19, 195, 33, 227, 160, 87, 156 },
                            PasswordSalt = new byte[] { 145, 134, 143, 179, 85, 185, 211, 228, 60, 253, 233, 59, 248, 202, 177, 212, 255, 98, 155, 1, 16, 219, 151, 211, 231, 187, 250, 105, 144, 48, 20, 64, 124, 122, 13, 141, 236, 152, 146, 95, 134, 173, 41, 250, 244, 232, 29, 1, 117, 168, 35, 3, 2, 63, 91, 151, 199, 83, 248, 145, 25, 114, 209, 71, 146, 182, 5, 103, 227, 0, 70, 248, 29, 249, 183, 215, 158, 102, 153, 101, 35, 11, 144, 86, 54, 170, 226, 181, 69, 204, 118, 192, 236, 82, 229, 45, 102, 204, 203, 144, 164, 113, 3, 43, 47, 225, 41, 126, 191, 169, 137, 196, 232, 78, 103, 182, 131, 78, 44, 91, 132, 26, 87, 135, 26, 134, 44, 220 },
                            PhoneNumber = "090553859",
                            ShopId = 2,
                            Username = "quocdat"
                        },
                        new
                        {
                            Id = 4,
                            Disable = false,
                            Email = "badding@gmail.com",
                            Fullname = "Đinh Công Tài",
                            PasswordHash = new byte[] { 196, 218, 2, 147, 228, 22, 147, 53, 172, 254, 255, 86, 17, 22, 226, 200, 90, 97, 150, 158, 169, 249, 251, 233, 106, 134, 219, 12, 30, 161, 17, 232, 178, 203, 66, 140, 69, 228, 147, 4, 75, 176, 150, 80, 81, 32, 50, 108, 118, 80, 195, 34, 70, 249, 180, 173, 10, 25, 29, 254, 152, 169, 233, 231 },
                            PasswordSalt = new byte[] { 145, 134, 143, 179, 85, 185, 211, 228, 60, 253, 233, 59, 248, 202, 177, 212, 255, 98, 155, 1, 16, 219, 151, 211, 231, 187, 250, 105, 144, 48, 20, 64, 124, 122, 13, 141, 236, 152, 146, 95, 134, 173, 41, 250, 244, 232, 29, 1, 117, 168, 35, 3, 2, 63, 91, 151, 199, 83, 248, 145, 25, 114, 209, 71, 146, 182, 5, 103, 227, 0, 70, 248, 29, 249, 183, 215, 158, 102, 153, 101, 35, 11, 144, 86, 54, 170, 226, 181, 69, 204, 118, 192, 236, 82, 229, 45, 102, 204, 203, 144, 164, 113, 3, 43, 47, 225, 41, 126, 191, 169, 137, 196, 232, 78, 103, 182, 131, 78, 44, 91, 132, 26, 87, 135, 26, 134, 44, 220 },
                            PhoneNumber = "090553859",
                            Username = "congtai"
                        });
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Cart", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("Carts")
                        .HasForeignKey("ProductDetail_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.GroupUser", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.History", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("Histories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithMany("Orders")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.ProductDetail", "ProductDetail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductDetail_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Permission", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Function", "Function")
                        .WithMany("Permissions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.HasOne("eComSolution.Data.Entities.Shop", "Shop")
                        .WithOne("User")
                        .HasForeignKey("eComSolution.Data.Entities.User", "ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Function", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Group", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Product", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.ProductDetail", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.Shop", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eComSolution.Data.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("GroupUsers");

                    b.Navigation("Histories");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
